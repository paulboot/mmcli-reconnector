#!/bin/bash

## mmcli-cl functions
## -- for my Sierra Netgear AirCard 320U Modem DirectIP-manual connection
##
## (using mmcli 1.6.2)
## <yadieet@gmail.com>

function datetime()
{
	date +"%-d-%-m-%Y %T"
}

function log()
{
    echo -n `date +'%b %d %k:%M:%S'` | tee -a $TMPLOG
    echo "  $NAME:$1" | tee -a $TMPLOG
}

function info()
{
    logger -t $NAME -p "local7.info" "INFO $1"
}

function warning()
{
    logger -t $NAME -p "local7.warning" "WARN $1"
}

function error()
{
    logger -t $NAME -p "local7.err" "ERR $1"
}

function debug()
{
    [[ "$debug" == "true" ]] && logger -t $NAME -p "local7.debug" "DEBUG $1"
}

function repdot()
{
    return ${1//[\.]/,}
}

function initleds()
{
    modprobe ledtrig-netdev

    #LED2 displays wwan0 activity
    echo "netdev" > /sys/class/leds/apu3:green:led2/trigger
    echo "wwan0" > /sys/class/leds/apu3:green:led2/device_name
    echo "1" > /sys/class/leds/apu3:green:led2/tx
    echo "1" > /sys/class/leds/apu3:green:led2/rx

    #LED3 displays found ibearer
    echo 0 > /sys/class/leds/apu3:green:led3/brightness
}

function getiinitbearer()
{
    iinitbearer=$(mmcli -J -m $imodem | jq -r '.modem."3gpp".eps."initial-bearer"."dbus-path"' | cut -d/ -f6 | awk '{print $1}')
}

function getibearer()
{
    ibearer=$(mmcli -J -m $imodem | jq -r '.modem.generic.bearers[0]' | cut -d/ -f6)
    [[ -z $ibearer ]] && error "In getibearer: No bearer found for modem ID: $imodem"
}

function getimodem()
{
    imodem=$(mmcli -J -L | jq -r '."modem-list"[0]' | cut -d/ -f6)
}

function getIPsettings()
{
    IPsettings=($(mmcli -J -b $ibearer | jq -r '.bearer."ipv4-config".address + " " + .bearer."ipv4-config".prefix + " " + .bearer."ipv4-config".gateway'))
}

function findModem()
{
    # Find first modem
    info "In findModem: Searching for first modem..."
    imodem=""
    until [[ -n $imodem ]]
    do
        getimodem
        [[ -z $imodem ]] && error "In findModem: No modem found sleep 1 second..." && sleep 1
    done

    # Find name of modem
    model=$(mmcli -J -m $imodem | jq -r '.modem.generic.model')
    revision=$(mmcli -J -m $imodem | jq -r '.modem.generic.revision')
    [[ -z $model ]] && error "In findModem: No modem description found for mofrm ID $imodem" && exit 1
    info "Found first modem ID $imodem with description \"${model}\""
}

function initModem()
{
    #  Initialise modem
    getimodem
    info "Initialising modem with ID $imodem"
    state=$(mmcli -J -m $imodem | jq -r '.modem.generic.state')
    if [[ "$state" == "connected" || "$state" == "registered" ]]; then
        info "Modem is in state connected or registered"
        info "Disable modem first before config change is possible"
        info "$(mmcli -m $imodem -d)"
    fi

    state=$(mmcli -J -m $imodem | jq -r '.modem.generic.state')
    if [[ "$state" == "disabled" ]]; then
        info "$(mmcli -m $imodem --set-power-state-on)"
        info "$(mmcli -m $imodem --signal-setup=5)"
        info "$(mmcli -m $imodem --set-allowed-modes='4g')"
        info "$(mmcli -m $imodem -e)"
    fi

    state=$(mmcli -J -m $imodem | jq -r '.modem.generic.state')
    info "Modem is in state \"${state}\""
}

function connectBearer()
{
    #Disable LED3
    echo 0 > /sys/class/leds/apu3:green:led3/brightness

    info "In connectBearer: first check if modem is inserted"
    getimodem
    if [[ -z $imodem ]]; then
         error "In connectBearer: No modem found please reinsert modem"
         findModem
         initModem
    fi

    state=$(mmcli -J -m $imodem | jq -r '.modem.generic.state')
    info "In connectBearer: Modem is in state \"${state}\""

    if [[ "$state" == "registered" ]]
    then
        info "In connectBearer: No bearer for modem ID $imodem modem because in state \"${state}\""
        info "In connectBearer: Trying to do a simple-connect"
        info "$(mmcli -m $imodem --simple-connect='apn=internet.access.nl,ip-type=ipv4v6,allow-roaming=1')"
    fi

    getibearer
    [[ -z $ibearer ]] && error "In connectBearer: Still no bearer found exit Network or APN config error?" && exit
    state=$(mmcli -J -m $imodem | jq -r '.modem.generic.state')
    info "In connectBearer: Found bearer ID $ibearer modem is in state \"${state}\""
    barerget=$(mmcli -b $ibearer)
    conbearer=$(echo $barerget | cut -d ':' -f4 | awk '{print $1}')
    info "In connectBearer1: For bearer ID $ibearer is status connected: \"${conbearer}\""
    if [[ "$conbearer" == "no" ]]
    then
        info "$(mmcli -b $ibearer -c)"
        getibearer
        barerget=$(mmcli -b $ibearer)
        conbearer=$(echo $barerget | cut -d ':' -f4 | awk '{print $1}')
    fi
    info "In connectBearer2: For bearer ID $ibearer is status connected: \"${conbearer}\""
    #Enable LED3
    echo 1 > /sys/class/leds/apu3:green:led3/brightness
}

function configureWwan()
{
    info "Configuring WWAN interface: ${WWAN_IFACE}"
    getibearer
    getIPsettings

    #delete default routes if exist
    if [[ $(ip route show default) ]]
    then
        info "Deleting default routes $(ip route show default)"
        ip route del default
    fi

    #info "$(ip route del default dev $WWAN_IFACE)"
    ip link set dev ${WWAN_IFACE} down
    ip addr flush dev ${WWAN_IFACE}

    ip addr add ${IPsettings[0]}/${IPsettings[1]} dev ${WWAN_IFACE}
    ip link set dev ${WWAN_IFACE} arp off
    ip link set dev ${WWAN_IFACE} mtu ${MTU}
    ip link set dev ${WWAN_IFACE} up
    ip route add default via ${IPsettings[2]} dev ${WWAN_IFACE} metric 100
    info "Added IP address/prefix ${IPsettings[0]}/${IPsettings[1]} and destination ${IPsettings[2]} default route on WWAN interface: ${WWAN_IFACE}"
}

function initnft()
{
    #test if rules exits
    #nft list table inet nat > /dev/null 2>&1 ;echo $?
    info "Adding firewall rules"
    nft add table inet nat
    nft add chain inet nat postrouting '{ type nat hook postrouting priority 100 ; }'
    nft add rule inet nat postrouting oifname wwan0 masquerade

    nft add table inet filter
    nft add chain inet filter forward '{ type filter hook forward priority 0; policy drop; }'
    nft add rule inet filter forward ct state related,established accept
    nft add rule inet filter forward iifname wlan0 oifname wwan0 accept
    nft add rule inet filter forward iifname eth0 oifname wwan0 accept
}
